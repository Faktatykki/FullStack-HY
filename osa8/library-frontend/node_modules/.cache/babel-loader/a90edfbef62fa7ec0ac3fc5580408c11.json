{"ast":null,"code":"var _jsxFileName = \"/home/samkaari/Documents/FullStack/newFullStack-HY/FullStack-HY/osa8/library-frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport { setContext } from 'apollo-link-context';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst authLink = setContext((__, {\n  headers\n}) => {\n  const token = localStorage.getItem('user-token');\n  return {\n    headers: { ...headers,\n      authorization: token ? `bearer ${token}` : null\n    }\n  };\n});\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000'\n});\nconst wsLink = new WebSocketLink({\n  uri: 'ws://localhost:4000/graphql',\n  options: {\n    reconnect: true\n  }\n});\nconst splitLink = split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, authLink.concat(httpLink));\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink\n}); //client saadaan sovelluksen kaikkien komponenttien saataville käärimällä App providerin lapseksi\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 48,\n  columnNumber: 17\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/home/samkaari/Documents/FullStack/newFullStack-HY/FullStack-HY/osa8/library-frontend/src/index.js"],"names":["React","ReactDOM","App","ApolloClient","ApolloProvider","HttpLink","InMemoryCache","split","setContext","getMainDefinition","WebSocketLink","authLink","__","headers","token","localStorage","getItem","authorization","httpLink","uri","wsLink","options","reconnect","splitLink","query","definition","kind","operation","concat","client","cache","link","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,QAAvC,EAAiDC,aAAjD,EAAgEC,KAAhE,QAA6E,gBAA7E;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,aAAT,QAA8B,wBAA9B;;AAEA,MAAMC,QAAQ,GAAGH,UAAU,CAAC,CAACI,EAAD,EAAK;AAAEC,EAAAA;AAAF,CAAL,KAAqB;AAC7C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd;AACA,SAAO;AACHH,IAAAA,OAAO,EAAE,EACL,GAAGA,OADE;AAELI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFtC;AADN,GAAP;AAMH,CAR0B,CAA3B;AAUA,MAAMI,QAAQ,GAAG,IAAIb,QAAJ,CAAa;AAAEc,EAAAA,GAAG,EAAE;AAAP,CAAb,CAAjB;AAEA,MAAMC,MAAM,GAAG,IAAIV,aAAJ,CAAkB;AAC7BS,EAAAA,GAAG,EAAE,6BADwB;AAE7BE,EAAAA,OAAO,EAAE;AACLC,IAAAA,SAAS,EAAE;AADN;AAFoB,CAAlB,CAAf;AAOA,MAAMC,SAAS,GAAGhB,KAAK,CACnB,CAAC;AAAEiB,EAAAA;AAAF,CAAD,KAAe;AACX,QAAMC,UAAU,GAAGhB,iBAAiB,CAACe,KAAD,CAApC;AACA,SACIC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF7B;AAIH,CAPkB,EAQnBP,MARmB,EASnBT,QAAQ,CAACiB,MAAT,CAAgBV,QAAhB,CATmB,CAAvB;AAYA,MAAMW,MAAM,GAAG,IAAI1B,YAAJ,CAAiB;AAC5B2B,EAAAA,KAAK,EAAE,IAAIxB,aAAJ,EADqB;AAE5ByB,EAAAA,IAAI,EAAER;AAFsB,CAAjB,CAAf,C,CAKA;;AACAtB,QAAQ,CAAC+B,MAAT,eAAgB,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAIH,MAA1B;AAAA,yBACR,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADQ;AAAA;AAAA;AAAA;AAAA,QAAhB,EAGII,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAHJ","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, split } from '@apollo/client'\nimport { setContext } from 'apollo-link-context'\n\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { WebSocketLink } from '@apollo/client/link/ws'\n\nconst authLink = setContext((__, { headers }) => {\n    const token = localStorage.getItem('user-token')\n    return {\n        headers: {\n            ...headers,\n            authorization: token ? `bearer ${token}` : null,\n        }\n    }\n})\n\nconst httpLink = new HttpLink({ uri: 'http://localhost:4000' })\n\nconst wsLink = new WebSocketLink({\n    uri: 'ws://localhost:4000/graphql',\n    options: {\n        reconnect: true\n    }\n})\n\nconst splitLink = split(\n    ({ query }) => {\n        const definition = getMainDefinition(query)\n        return (\n            definition.kind === 'OperationDefinition' &&\n            definition.operation === 'subscription'\n        )\n    },\n    wsLink,\n    authLink.concat(httpLink)\n)\n\nconst client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: splitLink\n})\n\n//client saadaan sovelluksen kaikkien komponenttien saataville käärimällä App providerin lapseksi\nReactDOM.render(<ApolloProvider client = {client}>\n        <App />\n    </ApolloProvider>, \n    document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}